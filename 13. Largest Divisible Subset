Given a set of distinct positive integers, find the largest subset such that every pair (Si, Sj) of elements in this subset satisfies:
Si % Sj = 0 or Sj % Si = 0.
If there are multiple solutions, return any subset is fine.

Example 1:
Input: [1,2,3]
Output: [1,2] (of course, [1,3] will also be ok)

Example 2:
Input: [1,2,4,8]
Output: [1,2,4,8]

Algorithm :

1. sort the array so that all divisor of a number comes before it.
2. now initialize dp array as 1 in all places (because min can be 1)
3. now loop through  i= 1 to n-1
4. again loop through  j = 0 to  j<i
                if ( nums[i] % nums[j] == 0 && dp[i] <dp[j]+1)
              {
                   dp[i]=dp[j]+1;
                 }
	
	
5. finally loop through the dp array to get the max value
6. As we have to return a vector .So maintain a vector mapping for each element
CODE

class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        if(nums.size()<=1) return nums;
        int n=nums.size();
        vector<int> lps(n,1);  
       
        unordered_map<int,vector<int> > m;
        
        for(auto i :nums)
            m[i].push_back(i);
        
        sort(nums.begin(),nums.end());
        
        for(int i=1;i<nums.size();i++)
        {
           for(int j=0;j<i;j++)
           {
             if(nums[i]%nums[j]==0&&lps[i]<lps[j]+1)
             {
                  m[nums[i]].push_back(nums[j]);
                  lps[i]=lps[j]+1;
             }
           }
        }
        int  mx=1;
        int mxid=0;
        for(int i=0;i<n;i++)
        {
            if(mx<lps[i])
            {
                mx=lps[i]; 
            mxid=i;
            }
            
        }
        // cout<<mx<<" "<<m[nums[mxid]].size()<<endl;
        return m[nums[mxid]];
    }
};
